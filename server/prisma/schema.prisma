generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models will be here 

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String
  role        UserRole? @default(EMPLOYEE)
  password    String
  phoneNumber String

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  needPasswordChange Boolean  @default(true)
  status             Status?  @default(ACTIVE)

  @@map("users")
}

model Employee {
  id              String    @id @default(uuid())
  firstName       String
  lastName        String
  middleName      String?
  email           String    @unique
  password        String
  phoneNumber     String
  country         String?
  passport        String?
  nidNumber       String
  alternateNumber String?
  city            String?
  attendanceShift Shift?
  address         String?
  designation     String?
  dateOfBirth     DateTime?
  joiningDate     DateTime?

  // Bank info  
  accountNumber         String?
  tinNumber             String?
  branchAddress         String?
  routingNumber         String?
  basicSalary           Float?
  transportAllowance    Float?
  grossSalary           Float?
  medicalBenefit        Float?
  transportationBenefit Float?
  familyBenefit         Float?
  otherBenefit          Float?

  // Dept Info 
  department    String
  subDepartment String?
  position      String
  dutyType      String?

  // Employee info
  hireDate          DateTime?
  rehireDate        DateTime?
  terminationDate   DateTime?
  cardNumber        String?
  monthlyWorkHours  Float?
  workPermit        Boolean?
  payFrequency      String?
  payFrequencyText  String?
  hourlyRate        Float?
  hourlyRate2       Float?
  employeeGrade     String?
  terminationReason String?
  workInCity        String?
  employeeType      String

  gender        Gender
  maritalStatus MaritalStatus
  numberOfKids  Int?          @default(0)
  sosNumber     String?
  religion      String?
  ethnicGroup   String?
  profileImage  String?
  passportPhoto String?

  emergencyContactPerson       String?
  emergencyContactRelationship String?
  emergencyContactNumber       String?
  emergencyHomePhone           String?
  emergencyWorkPhone           String?
  alternateEmergencyContact    String?
  alternateEmergencyHomePhone  String?
  alternateEmergencyWorkPhone  String?

  bloodGroup              String?
  healthCondition         String?
  isDisabled              Boolean @default(false)
  disabilitiesDescription String?

  homeEmail String?
  homePhone String?

  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("employees")
}

model Department {
  id            String          @id @default(uuid())
  name          String
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  subDepartment SubDepartment[]

  @@map("departments")
}

model SubDepartment {
  id           String     @id @default(uuid())
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Salary {
  id                 String @id @default(uuid())
  employeeId         Int
  basicSalary        Int
  totalBenefits      Int
  transportAllowance Int
  grossSalary        Int
  stateIncomeTax     Int
  socialSecurity     Int
  contribution       Int
  loanDeduction      Int
  salaryAdvance      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("salaries")
}

model Leave {
  id                String      @id @default(uuid())
  applyDate         DateTime
  leaveType         String
  startDate         DateTime
  endDate           DateTime
  days              Int
  reason            String
  approvedDate      DateTime
  approvedStartDate DateTime
  approvedEndDate   DateTime
  approvedDays      Int
  managerComment    String
  status            LeaveStatus
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  @@map("leaves")
}

model Holidays {
  id          String   @id @default(uuid())
  holidayName String
  fromDate    DateTime
  toDate      DateTime
  totalDays   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("holidays")
}

model WeeklyHolidays {
  id        String   @id @default(uuid())
  dayName   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("weekly_holidays")
}

enum EmployeeType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  TEMPORARY
  REMOTE
}

enum Shift {
  GENERAL
  OVERTIME
  NIGHT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}
