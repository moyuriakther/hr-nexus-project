generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  name               String
  role               UserRole? @default(EMPLOYEE)
  password           String
  photo              String?
  coverPhoto         String?
  signature          String?
  phoneNumber        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  needPasswordChange Boolean   @default(true)
  status             Status?   @default(ACTIVE)

  @@map("users")
}

model Employee {
  id                           String         @id @default(uuid())
  firstName                    String
  lastName                     String
  middleName                   String?
  email                        String         @unique
  password                     String
  phoneNumber                  String
  country                      String?
  passport                     String?
  nidNumber                    String?
  alternateNumber              String?
  city                         String?
  attendanceShift              Shift?
  address                      String?
  designation                  String?
  dateOfBirth                  String?
  joiningDate                  String?
  accountNumber                String?
  tinNumber                    String?
  branchAddress                String?
  routingNumber                String?
  basicSalary                  Float?
  transportAllowance           Float?
  grossSalary                  Float?
  medicalBenefit               Float?
  transportationBenefit        Float?
  familyBenefit                Float?
  otherBenefit                 Float?
  departmentId                 String
  subDepartmentId              String
  position                     String?
  dutyType                     String?
  hireDate                     String?
  rehireDate                   String?
  terminationDate              String?
  cardNumber                   String?
  monthlyWorkHours             Float?
  workPermit                   Boolean?
  payFrequency                 String?
  payFrequencyText             String?
  hourlyRate                   Float?
  hourlyRate2                  Float?
  employeeGrade                String?
  terminationReason            String?
  workInCity                   String?
  employeeType                 String
  gender                       Gender?
  maritalStatus                MaritalStatus?
  numberOfKids                 Int?           @default(0)
  sosNumber                    String?
  religion                     String?
  ethnicGroup                  String?
  profileImage                 String?
  passportPhoto                String?
  emergencyContactPerson       String?
  emergencyContactRelationship String?
  emergencyContactNumber       String?
  emergencyHomePhone           String?
  emergencyWorkPhone           String?
  alternateEmergencyContact    String?
  alternateEmergencyHomePhone  String?
  alternateEmergencyWorkPhone  String?
  bloodGroup                   String?
  healthCondition              String?
  isDisabled                   Boolean        @default(false)
  disabilitiesDescription      String?
  homeEmail                    String?
  homePhone                    String?
  status                       Status         @default(ACTIVE)
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
  userRole                     UserRole       @default(EMPLOYEE)
  isDeleted                    Boolean        @default(false)
  payment                      Payment[]
  attendance                   Attendance[]
  award                        Award[]
  department                   Department     @relation(fields: [departmentId], references: [id])
  subDepartment                SubDepartment  @relation(fields: [subDepartmentId], references: [id])
  leave                        Leave[]
  loan                         Loan[]
  salary                       Salary[]

  @@map("employees")
}

model Department {
  id             String          @id @default(uuid())
  departmentName String
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  isActive       Boolean         @default(true)
  isDeleted      Boolean         @default(false)
  employee       Employee[]
  subDepartment  SubDepartment[]

  @@map("departments")
}

model SubDepartment {
  id                String     @id @default(uuid())
  departmentId      String
  subDepartmentName String
  description       String
  isActive          Boolean    @default(true)
  isDeleted         Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())
  employee          Employee[]
  department        Department @relation(fields: [departmentId], references: [id])

  @@map("sub_departments")
}

model Attendance {
  id             String          @id @default(uuid())
  employeeId     String
  date           DateTime?
  checkIn        DateTime?
  checkOut       DateTime?
  monthName      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  attendanceType AttendanceType?
  employee       Employee        @relation(fields: [employeeId], references: [id])

  @@map("attendances")
}

model Salary {
  id                 String   @id @default(uuid())
  employeeId         String
  basicSalary        Float
  totalBenefits      Float
  transportAllowance Float
  grossSalary        Float
  stateIncomeTax     Float
  socialSecurity     Float
  contribution       Float
  loanDeduction      Float
  salaryAdvance      Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  employee           Employee @relation(fields: [employeeId], references: [id])

  @@map("salaries")
}

model Leave {
  id                String      @id @default(uuid())
  applyDate         DateTime?   @default(now())
  leaveType         String
  startDate         DateTime?
  endDate           DateTime?
  days              Int?
  reason            String?
  approvedDate      DateTime?
  approvedStartDate DateTime?
  approvedEndDate   DateTime?
  approvedDays      Int?
  managerComment    String?
  status            LeaveStatus @default(PENDING)
  isDeleted         Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  employeeId        String?
  leaveCode         String?     @default("")
  employee          Employee?   @relation(fields: [employeeId], references: [id])

  @@map("leaves")
}

model Payment {
  id            String         @id @default(uuid())
  employeeId    String
  salaryMonth   String
  totalSalary   Float
  releaseAmount Float?
  status        PaymentStatus?
  date          DateTime?      @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  employee      Employee       @relation(fields: [employeeId], references: [id])
}

model Client {
  id          String    @id @default(uuid())
  clientName  String
  country     String?
  email       String?
  companyName String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  isDeleted   Boolean   @default(false)
  project     Project[]

  @@map("clients")
}

model Project {
  id                 String        @id @default(uuid())
  clientId           String
  projectName        String?
  projectDescription String?
  approximateTasks   Int?
  projectDuration    String?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  isDeleted          Boolean       @default(false)
  ProjectTask        ProjectTask[]
  client             Client        @relation(fields: [clientId], references: [id])

  @@map("projects")
}

model ProjectTask {
  id              String          @id @default(uuid())
  projectId       String
  employeeIds     String[]
  taskName        String?
  taskDescription String?
  taskType        String?
  taskStatus      TaskStatus?
  taskStartDate   DateTime?
  taskEndDate     DateTime?
  taskPriority    String?
  priority        PriorityStatus?
  createdBy       String?
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  project         Project         @relation(fields: [projectId], references: [id])
}

model Award {
  id               String    @id @default(uuid())
  employeeId       String
  awardName        String
  awardDescription String?
  giftItem         String?
  date             DateTime?
  awardBy          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  isDeleted        Boolean   @default(false)
  employee         Employee  @relation(fields: [employeeId], references: [id])

  @@map("awards")
}

model Loan {
  id                 String      @id @default(uuid())
  employeeId         String
  permittedBy        String?
  loanNo             String?
  amount             Float?
  interestRate       Float?
  installmentPeriod  Int?
  installmentCleared Int?
  repaymentAmount    Float?
  isDeleted          Boolean     @default(false)
  approvedDate       DateTime?
  repaymentFrom      DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now())
  status             LeaveStatus @default(PENDING)
  employee           Employee    @relation(fields: [employeeId], references: [id])

  @@map("loans")
}

model Holidays {
  id          String    @id @default(uuid())
  holidayName String?
  fromDate    DateTime?
  toDate      DateTime?
  totalDays   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  isDeleted   Boolean   @default(false)

  @@map("holidays")
}

model WeeklyHolidays {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  dayName   String[]

  @@map("weekly_holidays")
}

model CandidateList {
  id          String      @id @default(uuid())
  name        String?
  candidateId String      @default(uuid()) @unique
  photograph  String?
  email       String?
  ssn         String?
  phone       String?
  jobPosition String?
  meetingLink String?
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  shortList   ShortList[]

  @@map("candidate_lists")
}

model ShortList {
  id            String         @id @default(uuid())
  candidateId   String        @unique
  shortlistDate DateTime?
  interviewDate DateTime?
  meetingLink            String?
  candidate CandidateList @relation(fields: [candidateId], references: [candidateId])
  isDeleted Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  interview Interview[]

  @@map("short_lists")
}
model Interview {
  id                     String               @id @default(uuid())
  interviewId            String               @default(uuid()) @unique
  interviewer            String?
  interviewDate          String
  vivaMarks              String?
  writtenMarks           String?
  mcqTotalMarks          String?
  totalMarks             String?
  meetingLink            String?
  isSelected             Boolean              @default(false)
  candidateId            String               @unique
  isDeleted              Boolean              @default(false)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  CandidateSelection     CandidateSelection[]
  shortListedCandidate   ShortList            @relation(fields: [candidateId], references: [candidateId])

  @@map("interview")
}

model CandidateSelection {
  id              String    @id @default(uuid())
  selectionTerms  String?
  interviewId     String?
  isDeleted       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  candidateId     String
  interview       Interview @relation(fields: [candidateId], references: [candidateId])

  @@map("candidate_selections")
}

model NoticeData {
  id          String    @id @default(uuid())
  noticeType  String?
  description String?
  noticeDate  DateTime?
  noticeBy    String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("notice_boards")
}


enum EmployeeType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  TEMPORARY
  REMOTE
}

enum Shift {
  GENERAL
  OVERTIME
  NIGHT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum AttendanceType {
  DAILY
  WEEKLY
  MONTHLY
}

enum PaymentStatus {
  PENDING
  PAID
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  TODO
}

enum PriorityStatus {
  HIGH
  MEDIUM
  LOW
}
